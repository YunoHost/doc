"use strict";(self.webpackChunkyunohost_docs=self.webpackChunkyunohost_docs||[]).push([["6704"],{2014:function(e,n,a){a.r(n),a.d(n,{frontMatter:()=>t,toc:()=>i,default:()=>u,metadata:()=>r,assets:()=>c,contentTitle:()=>o});var r=JSON.parse('{"id":"packaging/scripts/shell_variables_scope","title":"Port\xe9e g\xe9n\xe9rales des variables","description":"Les variables existent pour le shell courant et ses enfants uniquement.","source":"@site/i18n/fr/docusaurus-plugin-content-docs/current/packaging/20.scripts/10.shell_variables_scope.mdx","sourceDirName":"packaging/20.scripts","slug":"/packaging/scripts/shell_variables_scope","permalink":"/pr-2672/fr/packaging/scripts/shell_variables_scope","draft":false,"unlisted":false,"editUrl":"https://github.com/YunoHost/doc/tree/main/i18n/fr/docusaurus-plugin-content-docs/current/packaging/20.scripts/10.shell_variables_scope.mdx","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"title":"Port\xe9e g\xe9n\xe9rales des variables","template":"docs","taxonomy":{"category":"docs"},"routes":{"default":"/shell_variables_scope"}},"sidebar":"devpackaging","previous":{"title":"The scripts","permalink":"/pr-2672/fr/packaging/scripts/"},"next":{"title":"App helpers (v2)","permalink":"/pr-2672/fr/packaging/scripts/helpers_v2.0"}}'),s=a(4848),l=a(4429);let t={title:"Port\xe9e g\xe9n\xe9rales des variables",template:"docs",taxonomy:{category:"docs"},routes:{default:"/shell_variables_scope"}},o,c={},i=[{value:"Les fonctions dans un script",id:"les-fonctions-dans-un-script",level:3},{value:"L&#39;usage des variables locales",id:"lusage-des-variables-locales",level:3},{value:"Conclusion",id:"conclusion",level:3}];function v(e){let n={br:"br",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Les variables existent pour le shell courant et ses enfants uniquement.",(0,s.jsx)(n.br,{}),"\n","Un script ex\xe9cut\xe9 depuis le script n'est pas un enfant, c'est un autre shell qui n'h\xe9ritera que des variables d'environnement du script appelant, pas des variables globales ou locales."]}),"\n",(0,s.jsx)(n.p,{children:"Lors de l'appel d'un script, il n'est pas d\xe9marr\xe9 dans le shell courant, mais dans une nouvelle instance de bash qui h\xe9rite des variables d'environnements de son parent."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'var1=value1\nexport var2=value2\n\necho "$var1"\necho "$var2"\n# var1 et var2 existent\n\necho "-"\n\necho "\necho \\"\\$var1\\"\necho \\"\\$var2\\"" > other_script.sh\nchmod +x other_script.sh\n./other_script.sh\n# Ici, var1 n\'existe pas, seul var2 existe encore.\n# Car c\'est une variable d\'environnement.\n'})}),"\n",(0,s.jsx)(n.p,{children:"Dans le shell courant, d'o\xf9 le script est appel\xe9, faite"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"echo $var1 - $var2\n"})}),"\n",(0,s.jsx)(n.p,{children:"Aucune des 2 variables n'existent, car leur port\xe9e se limite au script appel\xe9. Jamais au parent."}),"\n",(0,s.jsx)(n.h3,{id:"les-fonctions-dans-un-script",children:"Les fonctions dans un script"}),"\n",(0,s.jsx)(n.p,{children:"Utiliser une fonction ne change pas la port\xe9e des variables."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'var1=value1\nexport var2=value2\n\nset_variable () {\n var3=value3\n export var4=value4\n\n echo "$var1"\n echo "$var2"\n echo "$var3"\n echo "$var4"\n # Toutes les variables existent ici\n # car la fonction h\xe9rite des variables du script.\n}\n\nset_variable\n\necho "$var1"\necho "$var2"\necho "$var3"\necho "$var4"\n# var1 var2, var3 et var4 existent\n# var3 existe car la fonction est ex\xe9cut\xe9e dans le m\xeame shell que le script lui-m\xeame.\n\necho "-"\n\necho "\necho \\"\\$var1\\"\necho \\"\\$var2\\"\necho \\"\\$var3\\"\necho \\"\\$var4\\"" > other_script.sh\nchmod +x other_script.sh\n./other_script.sh\n# Ici, var1 et var3 n\'existent pas, seul var2 et var4 existe encore.\n# Car ce sont des variables d\'environnements.\n'})}),"\n",(0,s.jsx)(n.h3,{id:"lusage-des-variables-locales",children:"L'usage des variables locales"}),"\n",(0,s.jsx)(n.p,{children:"Les variables locales sont limit\xe9es \xe0 une fonction et ses enfants"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'var1=value1\nexport var2=value2\n\nset_variable () {\n var3=value3\n export var4=value4\n local var5=value5\n\n echo "$var1"\n echo "$var2"\n echo "$var3"\n echo "$var4"\n echo "$var5"\n # Toutes les variables existent ici\n # car la fonction h\xe9rite des variables du script.\n}\n\nset_variable\n\necho "-"\n\necho "$var1"\necho "$var2"\necho "$var3"\necho "$var4"\necho "$var5"\n# var1 var2, var3 et var4 existent\n# var3 existe car la fonction est ex\xe9cut\xe9e dans le m\xeame shell que le script lui-m\xeame.\n# var5 n\'existe pas, car sa port\xe9e se limite \xe0 la fonction qui l\'a d\xe9clar\xe9\n\necho "-"\n\necho "\necho \\"\\$var1\\"\necho \\"\\$var2\\"\necho \\"\\$var3\\"\necho \\"\\$var4\\"\necho \\"\\$var5\\"" > other_script.sh\nchmod +x other_script.sh\n./other_script.sh\n# Ici, var1, var3 et var5 n\'existent pas, seul var2 et var4 existe encore.\n# Car ce sont des variables d\'environnements.\n'})}),"\n",(0,s.jsxs)(n.p,{children:["L'int\xe9r\xeat d'utiliser une variable locale est donc de limiter cette variable \xe0 la seule fonction qui l'a d\xe9clar\xe9. Et donc ne pas polluer le script dans sa globalit\xe9 avec des variables inutile pour ce dernier.",(0,s.jsx)(n.br,{}),"\n","Il existe \xe9galement un second avantage \xe0 l'usage d'une variable locale, c'est de ne pas modifier le contenu d'une variable globale."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'var1=value1\nvar2=value2\nvar3=value3\n\nset_variable () {\n echo "$var1"\n echo "$var2"\n echo "$var3"\n\n echo "-"\n\n var2=new_value2\n local var3=new_value3\n\n echo "$var1"\n echo "$var2"\n echo "$var3"\n # La valeurs de var2 et var3 sont modifi\xe9es dans la fonction\n}\n\nset_variable\n\necho "-"\n\necho "$var1"\necho "$var2"\necho "$var3"\n# var3 a repris sa valeur initiale,\n# car dans la fonction var3 a \xe9t\xe9 d\xe9clar\xe9 comme une nouvelle variable locale.\n# Mais var2 a \xe9t\xe9 modifi\xe9e directement, donc sa valeur reste modifi\xe9e.\n# Car var2 dans la fonction est rest\xe9 une variable globale.\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Comme vu pr\xe9c\xe9demment, les variables modifi\xe9e ou cr\xe9\xe9e dans la fonction affecte le script car la fonction est ex\xe9cut\xe9e dans le m\xeame shell que celui-ci.",(0,s.jsx)(n.br,{}),"\n","Cela change si on ex\xe9cute la fonction dans un sous-shell, la fonction devient un enfant qui h\xe9rite de son parent uniquement."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'var1=value1\nvar2=value2\nvar3=value3\n\nfonction2 () {\n echo "-"\n echo "var1=$var1"\n echo "var2=$var2"\n echo "var3=$var3"\n echo "var4=$var4"\n echo "var5=$var5"\n # M\xeame var3, qui est locale, est h\xe9rit\xe9e par la fonction enfant.\n}\n\nset_variable () {\n echo "var1=$var1"\n echo "var2=$var2"\n echo "var3=$var3"\n # Les variables sont h\xe9rit\xe9es du parent.\n\n echo "-"\n\n var2=new_value2\n local var3=new_value3\n var4=new_value4\n export var5=new_value5\n\n echo "var1=$var1"\n echo "var2=$var2"\n echo "var3=$var3"\n echo "var4=$var4"\n echo "var5=$var5"\n # La valeurs de var2 et var3 sont modifi\xe9es dans la fonction\n\n (fonction2)\n}\n\n(set_variable)\n# D\xe9marre la fonction dans un shell fils.\n\necho "-"\n\necho "var1=$var1"\necho "var2=$var2"\necho "var3=$var3"\necho "var4=$var4"\necho "var5=$var5"\n# var2 et var3 ont repris leur valeurs initiales,\n# Car la fonction est dans un shell enfant qui n\'affecte pas son parent.\n# De m\xeame, var4 et var5 n\'existent pas, car elle sont d\xe9clar\xe9es dans un shell enfant.\n# Le parent n\'h\xe9rite pas des shells enfants.\n'})}),"\n",(0,s.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"La port\xe9e d'une variable est toujours le shell courant et ses enfants, jamais son shell parent."}),"\n",(0,s.jsx)(n.li,{children:"Une variable d'environnement peut \xeatre export\xe9e sur un nouveau shell, ind\xe9pendant du premier. \xc0 condition que ce dernier ex\xe9cute le second. Mais ne peut pas affecter les parents."}),"\n",(0,s.jsx)(n.li,{children:"Une variable locale dans une fonction, ex\xe9cut\xe9e dans le shell courant, n'affecte pas son environnement en dehors de la fonction. Et permet \xe9galement de ne pas affecter le contenu d'une variable globale de m\xeame nom."}),"\n",(0,s.jsx)(n.li,{children:"Une fonction ex\xe9cut\xe9e dans un sous-shell n'affecte jamais le parent, que ses variables soient globales ou locales."}),"\n",(0,s.jsx)(n.li,{children:"Le parent n'est JAMAIS affect\xe9 par les variables d\xe9finies ou modifi\xe9es par ses shells enfants."}),"\n"]})]})}function u(e={}){let{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(v,{...e})}):v(e)}},4429:function(e,n,a){a.d(n,{R:()=>t,x:()=>o});var r=a(6540);let s={},l=r.createContext(s);function t(e){let n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);