"use strict";(self.webpackChunkyunohost_docs=self.webpackChunkyunohost_docs||[]).push([["1093"],{2465:function(e,n,a){a.r(n),a.d(n,{frontMatter:()=>i,toc:()=>o,default:()=>v,metadata:()=>r,assets:()=>c,contentTitle:()=>l});var r=JSON.parse('{"id":"packaging/scripts/shell_variables_scope","title":"General scope of variables","description":"Variables exists for the current shell and its children only.","source":"@site/docs/packaging/20.scripts/10.shell_variables_scope.mdx","sourceDirName":"packaging/20.scripts","slug":"/packaging/scripts/shell_variables_scope","permalink":"/pr-2672/ar/packaging/scripts/shell_variables_scope","draft":false,"unlisted":false,"editUrl":"https://github.com/YunoHost/doc/tree/main/docs/packaging/20.scripts/10.shell_variables_scope.mdx","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"title":"General scope of variables","template":"docs","taxonomy":{"category":"docs"},"routes":{"default":"/shell_variables_scope"}},"sidebar":"devpackaging","previous":{"title":"The scripts","permalink":"/pr-2672/ar/packaging/scripts/"},"next":{"title":"App helpers (v2)","permalink":"/pr-2672/ar/packaging/scripts/helpers_v2.0"}}'),t=a(4848),s=a(4429);let i={title:"General scope of variables",template:"docs",taxonomy:{category:"docs"},routes:{default:"/shell_variables_scope"}},l,c={},o=[{value:"Functions inside a script",id:"functions-inside-a-script",level:3},{value:"The usage of locales variables",id:"the-usage-of-locales-variables",level:3},{value:"Conclusion",id:"conclusion",level:3}];function h(e){let n={br:"br",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Variables exists for the current shell and its children only.",(0,t.jsx)(n.br,{}),"\n","Another script executed from the script is not a child, it's another shell which herited only the environment variables from its caller script, not its globals or locals variables."]}),"\n",(0,t.jsx)(n.p,{children:"When a script is called, it isn't started in the current shell, but in a new instance of bash which herite environment variables from its parent."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'var1=value1\nexport var2=value2\n\necho "$var1"\necho "$var2"\n# var1 and var2 exist\n\necho "-"\n\necho "\necho \\"\\$var1\\"\necho \\"\\$var2\\"" > other_script.sh\nchmod +x other_script.sh\n./other_script.sh\n# Here, var1 doesn\'t exist, only var2 still exists.\n# Because it\'s an environment variable.\n'})}),"\n",(0,t.jsx)(n.p,{children:"In your current shell, where you launch this script, try"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"echo $var1 - $var2\n"})}),"\n",(0,t.jsx)(n.p,{children:"None of this 2 variables exists, because their scope is limited to the script itself. Never its parent."}),"\n",(0,t.jsx)(n.h3,{id:"functions-inside-a-script",children:"Functions inside a script"}),"\n",(0,t.jsx)(n.p,{children:"Use a function would not change the scope of variables."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'var1=value1\nexport var2=value2\n\nset_variable () {\n var3=value3\n export var4=value4\n\n echo "$var1"\n echo "$var2"\n echo "$var3"\n echo "$var4"\n # All variables exists here\n # Because the function inherite its variables from the script.\n}\n\nset_variable\n\necho "$var1"\necho "$var2"\necho "$var3"\necho "$var4"\n# var1 var2, var3 and var4 exist\n# var3 exist because the function is executed in the same shell than the script itself.\n\necho "-"\n\necho "\necho \\"\\$var1\\"\necho \\"\\$var2\\"\necho \\"\\$var3\\"\necho \\"\\$var4\\"" > other_script.sh\nchmod +x other_script.sh\n./other_script.sh\n# Here, var1 and var3 don\'t exist, only var2 and var4 still exist.\n# Because they\'re environment variables.\n'})}),"\n",(0,t.jsx)(n.h3,{id:"the-usage-of-locales-variables",children:"The usage of locales variables"}),"\n",(0,t.jsx)(n.p,{children:"Locales variables are limited to the function and its children."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'var1=value1\nexport var2=value2\n\nset_variable () {\n var3=value3\n export var4=value4\n local var5=value5\n\n echo "$var1"\n echo "$var2"\n echo "$var3"\n echo "$var4"\n echo "$var5"\n # All variables exists here\n # Because the function inherite its variables from the script.\n}\n\nset_variable\n\necho "-"\n\necho "$var1"\necho "$var2"\necho "$var3"\necho "$var4"\necho "$var5"\n# var1 var2, var3 and var4 exist\n# var3 exist because the function is executed in the same shell than the script itself.\n# var5 doesn\'t exist, because its scope is limited to the function which declare it.\n\necho "-"\n\necho "\necho \\"\\$var1\\"\necho \\"\\$var2\\"\necho \\"\\$var3\\"\necho \\"\\$var4\\"\necho \\"\\$var5\\"" > other_script.sh\nchmod +x other_script.sh\n./other_script.sh\n# Here, var1, var3 and var5 don\'t exist, only var2 and var4 still exist.\n# Because they\'re environment variables.\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Using a local variable is usefull for limit it scope to the function only. And not bother the script in its globality with useless variables.",(0,t.jsx)(n.br,{}),"\n","But there's also another advantage with local variable, do not modify the content of a global variable."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'var1=value1\nvar2=value2\nvar3=value3\n\nset_variable () {\n echo "$var1"\n echo "$var2"\n echo "$var3"\n\n echo "-"\n\n var2=new_value2\n local var3=new_value3\n\n echo "$var1"\n echo "$var2"\n echo "$var3"\n # Values of var2 and var3 are modified in the function.\n}\n\nset_variable\n\necho "-"\n\necho "$var1"\necho "$var2"\necho "$var3"\n# var3 retake is original value,\n# because in the function, var3 was declared as a new locale variable.\n# But var2 was directly modified, so its value still changed.\n# Because, var2 in the function is still a global variable.\n'})}),"\n",(0,t.jsxs)(n.p,{children:["As seen previously, modified or created variables in a function can affect the main script because the function is executed in the same shell.",(0,t.jsx)(n.br,{}),"\n","But, the things are different if the function is executed in a sub shell, the function become a child which only inherite from its parent."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'var1=value1\nvar2=value2\nvar3=value3\n\nfonction2 () {\n echo "-"\n echo "var1=$var1"\n echo "var2=$var2"\n echo "var3=$var3"\n echo "var4=$var4"\n echo "var5=$var5"\n # Even var3, which is local, is inherited from the parent function.\n}\n\nset_variable () {\n echo "var1=$var1"\n echo "var2=$var2"\n echo "var3=$var3"\n # Variables are inherited from the parent.\n\n echo "-"\n\n var2=new_value2\n local var3=new_value3\n var4=new_value4\n export var5=new_value5\n\n echo "var1=$var1"\n echo "var2=$var2"\n echo "var3=$var3"\n echo "var4=$var4"\n echo "var5=$var5"\n # Values of var2 and var3 are modified in the function.\n\n (fonction2)\n}\n\n(set_variable)\n# Start the function in a sub shell.\n\necho "-"\n\necho "var1=$var1"\necho "var2=$var2"\necho "var3=$var3"\necho "var4=$var4"\necho "var5=$var5"\n# var2 and var3 retake their original values.\n# Because the function is in a child shell which never affect its parent.\n# Likewise, var4 and var5 don\'t exist, because they\'re been declared in child shell.\n# The parent never inherite from its children shell.\n'})}),"\n",(0,t.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The scope of a variable is always the current shell and its children, never its parent shell."}),"\n",(0,t.jsx)(n.li,{children:"An environment variable may be exported to a new shell, detached from the first one. If the last one executed the second one. But, it can't affect the parents."}),"\n",(0,t.jsx)(n.li,{children:"A locale variable in a function, executed in the current shell, can't affect the environment outside of the function. End allow also to not affect a global variable with the same name."}),"\n",(0,t.jsx)(n.li,{children:"A function executed in a sub shell will never affect its parent, with global or local variables."}),"\n",(0,t.jsx)(n.li,{children:"A parent can NEVER be affected by variables defined or modified in its children shell."}),"\n"]})]})}function v(e={}){let{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},4429:function(e,n,a){a.d(n,{R:()=>i,x:()=>l});var r=a(6540);let t={},s=r.createContext(t);function i(e){let n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);